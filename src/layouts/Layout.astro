---
import { SEO } from "astro-seo";
import Link from "@components/Link.astro";
import { Icon } from "astro-icon/components";
import { defaultMeta, navigation } from "@data/constants";
import "@fontsource-variable/inter";
import "@fontsource-variable/newsreader";
import "@fontsource-variable/newsreader/wght-italic.css";
import Callout from "@components/MDX/Callout.astro";
import SmoothScrooll from "@components/core/SmoothScroll";
import SpeedInsights from '@vercel/speed-insights/astro';
import "@styles/base.css";


interface Props {
  title?: string;
  description?: string;
  ogImage?: {
    src: string;
    alt: string;
  };
  pubDate?: Date;
  wide?: boolean;
}

const {
  title = defaultMeta.title,
  description = defaultMeta.description,
  pubDate,
  wide = false,
} = Astro.props;

const canonicalURL = new URL(Astro.url).href;
---

<!doctype html>
<html lang="en-US" class="scroll-smooth dark:[color-scheme:dark]">
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <head>
    {
      pubDate && (
        <meta
          property="article:published_time"
          content={pubDate.toISOString()}
        />
      )
    }
     <SEO
      titleDefault={title}
      titleTemplate="%s — yuxxeun"
      description={description}
      charset= "UTF-8"
      openGraph={{
        basic: {
          title: "%s — yuxxeun",
          url: "yuxxeun.vercel.app",
          type: "website",
          image: "https://raw.githubusercontent.com/yuxxeun/SR24/main/public/static/banner.png",
        }
      }}
      canonical={canonicalURL}
      twitter={{
        creator: "@yuxxeun"
      }}
      extend={{
        link: [{ rel: "icon", href: "/emoji.jpg" }],
        meta: [
          {
            name: "twitter:summary_large_image",
            content: "https://raw.githubusercontent.com/yuxxeun/SR24/main/public/static/banner.png",
          },
          { name: "twitter:title", content: "yuxxeun" },
          { name: "twitter:description", content: "yuxxeun digital garden" },
        ],
      }}
    />
    <SpeedInsights />
  </head>

  <body
    class="bg-zinc-50 pt-10 antialiased selection:bg-zinc-700 selection:text-zinc-100 dark:bg-zinc-950 dark:selection:bg-zinc-500 dark:selection:text-white 2xl:text-lg">
    <SmoothScrooll client:load>
      <a href="#main-content" class="absolute font-geistSansVariable top-1 -translate-x-full rounded-r-full border-y border-r border-transparent bg-zinc-300 px-4 py-1.5 text-xs font-medium text-zinc-800 opacity-0 transition-transform duration-300 focus:translate-x-0 focus:opacity-100 focus:outline-none dark:bg-zinc-800 dark:text-zinc-200 dark:focus:border-zinc-900 lg:top-[41px] lg:py-2 lg:text-sm">
        Skip to main content
      </a>
      <nav
        class="mx-auto mb-16 flex justify-between overflow-x-auto px-6 sm:overflow-x-visible lg:px-2"
        class:list={{
          "max-w-4xl": wide,
          "max-w-3xl": !wide,
        }}
      >
        <ul class="flex justify-evenly space-x-6 font-bold">
          {
            navigation.map((item) => (
              <li>
                <Link {...item} />
              </li>
            ))
          }
        </ul>
        <button
          id="dark-mode-toggle"
          class="text-zinc-900 hover:text-zinc-600 focus:outline-none dark:text-zinc-100 dark:hover:text-zinc-300"
          aria-label="Toggle theme mode">
          <Icon name="mv" class="sun-icon h-5 w-5" />
          <Icon name="sv" class="moon-icon h-5 w-5" />
        </button>
      </nav>
      <main
        class="mx-auto px-6 text-zinc-600 dark:text-zinc-400 lg:px-2"
        id="main-content"
        class:list={{
          "max-w-4xl": wide,
          "max-w-3xl": !wide,
        }}>
        <noscript>
          <Callout type="error" title="NOTICE">
            Some features on this website won't work without JavaScript such as
            theme toggle, search bar, and copy article.
          </Callout>
        </noscript>
        <slot />
      </main>
      <footer class="my-10">
        <div
          class="lg:text-lg md:text-md sm:text-sm mx-auto max-w-4xl px-6 text-center text-zinc-600 dark:text-zinc-400 lg:px-2">
            <p class="flex items-center justify-center font-geistMonoVariable">
            <svg class="mr-1.5 animate-pulse" data-testid="geist-icon" height="16" stroke-linejoin="round" viewBox="0 0 16 16" width="15" style="color: currentcolor;"><path d="M11.25 4.25V3.5C9.35033 2.86678 6 2.58921 6 0C6 2.58921 2.64967 2.86678 0.75 3.5V9.52717C0.75 11.2011 1.67915 12.7367 3.16197 13.5134L4.5 14.2143" stroke="currentColor" stroke-width="1.5" stroke-linecap="square" fill="transparent"></path>
              <circle cx="11.5" cy="11.5" r="3.875" stroke="currentColor" stroke-width="1.25" stroke-linecap="round" stroke-linejoin="round" fill="transparent"></circle>
              <path d="M8 11.5H15.25" stroke="currentColor" stroke-linejoin="bevel"></path>
              <path d="M10.75 15V15C10.0964 12.7124 10.0964 10.2876 10.75 8V8" stroke="currentColor" stroke-linejoin="bevel"></path>
              <path d="M12.25 15V15C12.9036 12.7124 12.9036 10.2876 12.25 8V8" stroke="currentColor" stroke-linejoin="bevel"></path>
            </svg> CC BY-NC-SA 4.0
          </p>
        </div>
      </footer>
    </SmoothScrooll>
  </body>
</html>

<script is:inline async>
  const darkModeToggle = document.getElementById("dark-mode-toggle");
  const darkClass = "dark";
  const htmlTag = document.querySelector("html");

  function applyDarkMode(isDark) {
    htmlTag.classList.toggle(darkClass, isDark);
    htmlTag.setAttribute("data-theme", isDark ? "min-dark" : "min-light");
    const sunIcon = document.querySelector(".sun-icon");
    const moonIcon = document.querySelector(".moon-icon");
    sunIcon.classList.toggle("hidden", isDark);
    moonIcon.classList.toggle("hidden", !isDark);
  }

  function getCookie(name) {
    const value = `; `;
    const parts = document.cookie.split(value);
    for (let i = 0; i < parts.length; i++) {
      const part = parts[i].split("=");
      if (part[0].trim() === name) {
        return part[1];
      }
    }
    return null;
  }

  function setCookie(name, value, expirationDays) {
    const date = new Date();
    date.setTime(date.getTime() + expirationDays * 24 * 60 * 60 * 1000);
    const expires = `expires=${date.toUTCString()}`;
    document.cookie = `${name}=${value}; ${expires}; path=/`;
  }

  const isDarkMode = getCookie("darkMode") === "true";
  applyDarkMode(isDarkMode);

  darkModeToggle.addEventListener("click", () => {
    const isDark = htmlTag.classList.contains(darkClass);
    applyDarkMode(!isDark);
    setCookie("darkMode", !isDark, 30);
  });
</script>

<style>
  body::-webkit-scrollbar {
    width: 8px;
  }

  body::-webkit-scrollbar-thumb {
    @apply bg-zinc-400;
  }

  .dark body::-webkit-scrollbar-thumb {
    @apply bg-zinc-800;
  }

  body::selection {
    background-color: rgb(198, 43, 226);
  }

  html.lenis,
  html.lenis body {
    height: auto;
  }

  .lenis.lenis-smooth {
    scroll-behavior: auto !important;
  }

  .lenis.lenis-smooth [data-lenis-prevent] {
    overscroll-behavior: contain;
  }

  .lenis.lenis-stopped {
    overflow: hidden;
  }

  .lenis.lenis-smooth iframe {
    pointer-events: none;
  }
</style>
